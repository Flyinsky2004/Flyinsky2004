import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.dc2d320f.js";const d=JSON.parse('{"title":"字符串","description":"","frontmatter":{"date":"2023-11-19T18:41:00.000Z","author":"Flyinsky","sticky":5,"top":5,"tags":["DataStruct"],"categories":["DataStruct"]},"headers":[],"relativePath":"docs/DataStruct&Algorithm/String.md","filePath":"docs/DataStruct&Algorithm/String.md","lastUpdated":null}'),p={name:"docs/DataStruct&Algorithm/String.md"},o=l(`<h1 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">字符串</p><p>字符串（String）是计算机科学中一种基本的数据类型，它在各种应用和算法中都有着重要的地位。本篇博客将深入探讨字符串的定义、基本数据结构、C语言实现代码及其原理，以及字符串在各种领域中的广泛应用示例。</p><table><thead><tr><th>下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>元素</td><td>‘H’</td><td>&#39;e&#39;</td><td>&#39;l&#39;</td><td>&#39;l&#39;</td><td>&#39;o&#39;</td><td>&#39;!&#39;</td></tr></tbody></table></div><h2 id="_1-字符串的定义" tabindex="-1">1.字符串的定义 <a class="header-anchor" href="#_1-字符串的定义" aria-label="Permalink to &quot;1.字符串的定义&quot;">​</a></h2><p>字符串是由字符组成的序列，是一种线性数据结构。字符可以包括字母、数字、标点符号等，它们按照一定的顺序排列形成字符串。字符串通常用于表示文本数据，例如单词、句子或文件内容。</p><h2 id="_2-基本数据结构定义" tabindex="-1">2.基本数据结构定义 <a class="header-anchor" href="#_2-基本数据结构定义" aria-label="Permalink to &quot;2.基本数据结构定义&quot;">​</a></h2><p>在C语言中，字符串通常以字符数组的形式表示。每个字符占用数组中的一个位置，而字符串的末尾以空字符（&#39;\\0&#39;）作为结束符。例如：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#EEFFFF;"> myString</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">]</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">=</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#0000FF;">char</span><span style="color:#000000;"> </span><span style="color:#001080;">myString</span><span style="color:#000000;">[</span><span style="color:#098658;">12</span><span style="color:#000000;">] = </span><span style="color:#A31515;">&quot;Hello, World&quot;</span><span style="color:#000000;">;</span></span></code></pre></div><p>这里，<code>myString</code> 是一个包含13个元素（包括末尾的空字符）的字符数组，存储了字符串 &quot;Hello, World&quot;。</p><h2 id="_3-增删改查-c-语言实现代码及其原理" tabindex="-1">3.增删改查 C 语言实现代码及其原理 <a class="header-anchor" href="#_3-增删改查-c-语言实现代码及其原理" aria-label="Permalink to &quot;3.增删改查 C 语言实现代码及其原理&quot;">​</a></h2><h3 id="_1-增加-字符串连接" tabindex="-1">1. 增加（字符串连接） <a class="header-anchor" href="#_1-增加-字符串连接" aria-label="Permalink to &quot;1. 增加（字符串连接）&quot;">​</a></h3><p>字符串的增加通常是通过字符串连接操作来实现。C语言提供了 <code>strcat</code> 函数，它将一个字符串连接到另一个字符串的末尾。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">str1</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> str2</span><span style="color:#C792EA;">[]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">strcat</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">str1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> str2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">连接后的字符串：%s</span><span style="color:#EEFFFF;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> str1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;string.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#795E26;">main</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;"> </span><span style="color:#001080;">str1</span><span style="color:#000000;">[</span><span style="color:#098658;">20</span><span style="color:#000000;">] = </span><span style="color:#A31515;">&quot;Hello, &quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;"> str2</span><span style="color:#0000FF;">[]</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;World&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">strcat</span><span style="color:#000000;">(str1, str2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">printf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;连接后的字符串：</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\n</span><span style="color:#A31515;">&quot;</span><span style="color:#000000;">, str1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h3 id="_2-删除-截取子串" tabindex="-1">2. 删除（截取子串） <a class="header-anchor" href="#_2-删除-截取子串" aria-label="Permalink to &quot;2. 删除（截取子串）&quot;">​</a></h3><p>删除操作可以通过截取子串来实现。C语言中可以使用 <code>strcpy</code> 函数来截取字符串。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> source</span><span style="color:#C792EA;">[]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">destination</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">strncpy</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">destination</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> source </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#EEFFFF;">destination</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#EEFFFF;">\\0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#545454;font-style:italic;"> // 手动添加字符串结束符</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">截取后的字符串：%s</span><span style="color:#EEFFFF;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> destination</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;string.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#795E26;">main</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;"> source</span><span style="color:#0000FF;">[]</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;Hello, World&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;"> </span><span style="color:#001080;">destination</span><span style="color:#000000;">[</span><span style="color:#098658;">10</span><span style="color:#000000;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">strncpy</span><span style="color:#000000;">(destination, source + </span><span style="color:#098658;">7</span><span style="color:#000000;">, </span><span style="color:#098658;">5</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">destination</span><span style="color:#000000;">[</span><span style="color:#098658;">5</span><span style="color:#000000;">] = </span><span style="color:#A31515;">&#39;</span><span style="color:#EE0000;">\\0</span><span style="color:#A31515;">&#39;</span><span style="color:#000000;">;</span><span style="color:#008000;"> // 手动添加字符串结束符</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">printf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;截取后的字符串：</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\n</span><span style="color:#A31515;">&quot;</span><span style="color:#000000;">, destination);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h3 id="_3-修改-替换字符" tabindex="-1">3. 修改（替换字符） <a class="header-anchor" href="#_3-修改-替换字符" aria-label="Permalink to &quot;3. 修改（替换字符）&quot;">​</a></h3><p>修改操作通常涉及替换字符串中的特定字符。以下是一个简单的示例，将字符串中的空格替换为下划线。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> myString</span><span style="color:#C792EA;">[]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">myString</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">myString</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#EEFFFF;">myString</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">替换空格后的字符串：%s</span><span style="color:#EEFFFF;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> myString</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;string.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#795E26;">main</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;"> myString</span><span style="color:#0000FF;">[]</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;Hello World&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#098658;">0</span><span style="color:#000000;">; i &lt; </span><span style="color:#795E26;">strlen</span><span style="color:#000000;">(myString); ++i) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">myString</span><span style="color:#000000;">[i] == </span><span style="color:#A31515;">&#39; &#39;</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#001080;">myString</span><span style="color:#000000;">[i] = </span><span style="color:#A31515;">&#39;_&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">printf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;替换空格后的字符串：</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\n</span><span style="color:#A31515;">&quot;</span><span style="color:#000000;">, myString);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h3 id="_4-查询-查找子串" tabindex="-1">4. 查询（查找子串） <a class="header-anchor" href="#_4-查询-查找子串" aria-label="Permalink to &quot;4. 查询（查找子串）&quot;">​</a></h3><p>查询操作可以通过查找子串在字符串中的位置来实现。C语言提供了 <code>strstr</code> 函数，用于在一个字符串中查找另一个字符串。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> myString</span><span style="color:#C792EA;">[]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> search</span><span style="color:#C792EA;">[]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strstr</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">myString</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> search</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">result </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 在字符串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 中的位置：%ld</span><span style="color:#EEFFFF;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> search</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> myString</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> result </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> myString</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">未找到子串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 在字符串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 中</span><span style="color:#EEFFFF;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> search</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> myString</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;string.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#795E26;">main</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;"> myString</span><span style="color:#0000FF;">[]</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;Hello, World&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;"> search</span><span style="color:#0000FF;">[]</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;World&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* result = </span><span style="color:#795E26;">strstr</span><span style="color:#000000;">(myString, search);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (result != </span><span style="color:#0000FF;">NULL</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">printf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;子串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 在字符串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 中的位置：</span><span style="color:#001080;">%ld</span><span style="color:#EE0000;">\\n</span><span style="color:#A31515;">&quot;</span><span style="color:#000000;">, search, myString, result - myString);</span></span>
<span class="line"><span style="color:#000000;">    } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">printf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;未找到子串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 在字符串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 中</span><span style="color:#EE0000;">\\n</span><span style="color:#A31515;">&quot;</span><span style="color:#000000;">, search, myString);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h2 id="_4-字符串匹配算法" tabindex="-1">4.字符串匹配算法 <a class="header-anchor" href="#_4-字符串匹配算法" aria-label="Permalink to &quot;4.字符串匹配算法&quot;">​</a></h2><h3 id="_1-brute-force" tabindex="-1">1.Brute Force <a class="header-anchor" href="#_1-brute-force" aria-label="Permalink to &quot;1.Brute Force&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Brute Force</p><p>BF（Brute Force）字符串暴力匹配算法是一种简单直观的字符串匹配方法，它通过在主串中逐个比较子串和主串的字符来寻找匹配。</p></div><p>在 <code>bruteForceSearch</code> 函数中，两个嵌套循环分别遍历主串和子串，逐个比较字符，如果发现不匹配，内循环会提前结束。如果内循环完整执行完毕，说明找到了匹配的子串，返回在主串中的起始位置；否则，返回-1表示未找到匹配子串。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdio.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">bruteForceSearch</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;font-style:italic;">mainStr</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">const</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;font-style:italic;">subStr</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> mainLen </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mainStr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> subLen </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">subStr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> mainLen </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> subLen</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> subLen</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">mainStr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">subStr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span><span style="color:#545454;font-style:italic;">  // 不匹配，跳出内循环</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> subLen</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">;</span><span style="color:#545454;font-style:italic;">  // 匹配，返回在主串中的起始位置</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#545454;font-style:italic;">  // 未找到匹配子串</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#EEFFFF;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> mainString </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> subString </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">bruteForceSearch</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mainString</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> subString</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">result </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">子串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 在主串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 中的起始位置：%d</span><span style="color:#EEFFFF;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> subString</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> mainString</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">未找到子串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 在主串 </span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;">%s</span><span style="color:#EEFFFF;">\\&quot;</span><span style="color:#C3E88D;"> 中</span><span style="color:#EEFFFF;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> subString</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> mainString</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#AF00DB;">#include</span><span style="color:#0000FF;"> </span><span style="color:#A31515;">&lt;string.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#795E26;">bruteForceSearch</span><span style="color:#000000;">(</span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* </span><span style="color:#001080;">mainStr</span><span style="color:#000000;">, </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* </span><span style="color:#001080;">subStr</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> mainLen = </span><span style="color:#795E26;">strlen</span><span style="color:#000000;">(mainStr);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> subLen = </span><span style="color:#795E26;">strlen</span><span style="color:#000000;">(subStr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#098658;">0</span><span style="color:#000000;">; i &lt;= mainLen - subLen; ++i) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> j;</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (j = </span><span style="color:#098658;">0</span><span style="color:#000000;">; j &lt; subLen; ++j) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">mainStr</span><span style="color:#000000;">[i + j] != </span><span style="color:#001080;">subStr</span><span style="color:#000000;">[j]) {</span></span>
<span class="line"><span style="color:#000000;">                </span><span style="color:#AF00DB;">break</span><span style="color:#000000;">;</span><span style="color:#008000;">  // 不匹配，跳出内循环</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (j == subLen) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> i;</span><span style="color:#008000;">  // 匹配，返回在主串中的起始位置</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> -</span><span style="color:#098658;">1</span><span style="color:#000000;">;</span><span style="color:#008000;">  // 未找到匹配子串</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">int</span><span style="color:#000000;"> </span><span style="color:#795E26;">main</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* mainString = </span><span style="color:#A31515;">&quot;Hello, World!&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* subString = </span><span style="color:#A31515;">&quot;World&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> result = </span><span style="color:#795E26;">bruteForceSearch</span><span style="color:#000000;">(mainString, subString);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (result != -</span><span style="color:#098658;">1</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">printf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;子串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 在主串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 中的起始位置：</span><span style="color:#001080;">%d</span><span style="color:#EE0000;">\\n</span><span style="color:#A31515;">&quot;</span><span style="color:#000000;">, subString, mainString, result);</span></span>
<span class="line"><span style="color:#000000;">    } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#795E26;">printf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;未找到子串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 在主串 </span><span style="color:#EE0000;">\\&quot;</span><span style="color:#001080;">%s</span><span style="color:#EE0000;">\\&quot;</span><span style="color:#A31515;"> 中</span><span style="color:#EE0000;">\\n</span><span style="color:#A31515;">&quot;</span><span style="color:#000000;">, subString, mainString);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><h3 id="_2-knuth-morris-pratt" tabindex="-1">2.Knuth-Morris-Pratt <a class="header-anchor" href="#_2-knuth-morris-pratt" aria-label="Permalink to &quot;2.Knuth-Morris-Pratt&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Knuth-Morris-Pratt</p><p>KMP（Knuth-Morris-Pratt）算法是一种高效的字符串匹配算法，其核心思想是利用已经匹配过的信息来避免不必要的比较，从而提高匹配效率。KMP算法的优势在于避免了在主串中已经比较过的部分重新比较，减少了比较的次数。通过构建部分匹配表，KMP算法能够在O(m+n)的时间复杂度内完成匹配，其中m为主串长度，n为模式串长度。相比于朴素的BF（Brute Force）算法，KMP在字符串匹配中具有更高的效率。</p></div><h4 id="_1-部分匹配表-partial-match-table" tabindex="-1">1. 部分匹配表（Partial Match Table） <a class="header-anchor" href="#_1-部分匹配表-partial-match-table" aria-label="Permalink to &quot;1. 部分匹配表（Partial Match Table）&quot;">​</a></h4><p>KMP算法的核心是构建部分匹配表，它记录了模式串中每个位置的最长相等真前缀和后缀的长度。具体构建部分匹配表的过程如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#EEFFFF;">cCopy codevoid </span><span style="color:#82AAFF;">buildPartialMatchTable</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;font-style:italic;">pattern</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;font-style:italic;">table</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> len </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pattern</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#EEFFFF;">table</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> prefix </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> len</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">prefix </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">pattern</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">pattern</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">prefix</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            prefix </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">table</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">prefix </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">pattern</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">pattern</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">prefix</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            prefix</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#EEFFFF;">table</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> prefix</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#000000;">cCopy codevoid </span><span style="color:#795E26;">buildPartialMatchTable</span><span style="color:#000000;">(</span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* </span><span style="color:#001080;">pattern</span><span style="color:#000000;">, </span><span style="color:#0000FF;">int</span><span style="color:#000000;">* </span><span style="color:#001080;">table</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> len = </span><span style="color:#795E26;">strlen</span><span style="color:#000000;">(pattern);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#001080;">table</span><span style="color:#000000;">[</span><span style="color:#098658;">0</span><span style="color:#000000;">] = </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> prefix = </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">for</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#098658;">1</span><span style="color:#000000;">; i &lt; len; ++i) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">while</span><span style="color:#000000;"> (prefix &gt; </span><span style="color:#098658;">0</span><span style="color:#000000;"> &amp;&amp; </span><span style="color:#001080;">pattern</span><span style="color:#000000;">[i] != </span><span style="color:#001080;">pattern</span><span style="color:#000000;">[prefix]) {</span></span>
<span class="line"><span style="color:#000000;">            prefix = </span><span style="color:#001080;">table</span><span style="color:#000000;">[prefix - </span><span style="color:#098658;">1</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">pattern</span><span style="color:#000000;">[i] == </span><span style="color:#001080;">pattern</span><span style="color:#000000;">[prefix]) {</span></span>
<span class="line"><span style="color:#000000;">            prefix++;</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#001080;">table</span><span style="color:#000000;">[i] = prefix;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><p>这个函数会遍历模式串 <code>pattern</code> 中的每个位置，计算出部分匹配值，并存储在 <code>table</code> 数组中。在计算部分匹配值时，使用一个 <code>prefix</code> 变量表示当前位置之前的最大相等真前缀和后缀的长度。</p><h4 id="_2-kmp匹配过程" tabindex="-1">2. KMP匹配过程 <a class="header-anchor" href="#_2-kmp匹配过程" aria-label="Permalink to &quot;2. KMP匹配过程&quot;">​</a></h4><p>KMP匹配的过程主要通过两个指针 <code>i</code> 和 <code>j</code> 来实现。<code>i</code> 指向主串，<code>j</code> 指向模式串。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-darker vp-code-dark"><code><span class="line"><span style="color:#82AAFF;">kmpSearch</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;font-style:italic;">mainStr</span><span style="color:#89DDFF;">,</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">const</span><span style="color:#EEFFFF;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#EEFFFF;"> </span><span style="color:#EEFFFF;font-style:italic;">pattern</span><span style="color:#89DDFF;">)</span><span style="color:#EEFFFF;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> mainLen </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">mainStr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> patternLen </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pattern</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> partialMatchTable </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">*)</span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">patternLen </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">buildPartialMatchTable</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pattern</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> partialMatchTable</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> mainLen</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#EEFFFF;">mainStr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">pattern</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            i</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">            j</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> patternLen</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">free</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">partialMatchTable</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> j</span><span style="color:#89DDFF;">;</span><span style="color:#545454;font-style:italic;">  // 匹配成功，返回在主串中的起始位置</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> mainLen </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">mainStr</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">pattern</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j</span><span style="color:#89DDFF;">])</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                j </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#EEFFFF;">partialMatchTable</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">j </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                i</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">free</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">partialMatchTable</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#545454;font-style:italic;">  // 未找到匹配子串</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><pre class="shiki light-plus vp-code-light"><code><span class="line"><span style="color:#795E26;">kmpSearch</span><span style="color:#000000;">(</span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* </span><span style="color:#001080;">mainStr</span><span style="color:#000000;">, </span><span style="color:#0000FF;">const</span><span style="color:#000000;"> </span><span style="color:#0000FF;">char</span><span style="color:#000000;">* </span><span style="color:#001080;">pattern</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> mainLen = </span><span style="color:#795E26;">strlen</span><span style="color:#000000;">(mainStr);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> patternLen = </span><span style="color:#795E26;">strlen</span><span style="color:#000000;">(pattern);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;">* partialMatchTable = (</span><span style="color:#0000FF;">int</span><span style="color:#000000;">*)</span><span style="color:#795E26;">malloc</span><span style="color:#000000;">(patternLen * </span><span style="color:#0000FF;">sizeof</span><span style="color:#000000;">(</span><span style="color:#0000FF;">int</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">buildPartialMatchTable</span><span style="color:#000000;">(pattern, partialMatchTable);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#0000FF;">int</span><span style="color:#000000;"> i = </span><span style="color:#098658;">0</span><span style="color:#000000;">, j = </span><span style="color:#098658;">0</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">while</span><span style="color:#000000;"> (i &lt; mainLen) {</span></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (</span><span style="color:#001080;">mainStr</span><span style="color:#000000;">[i] == </span><span style="color:#001080;">pattern</span><span style="color:#000000;">[j]) {</span></span>
<span class="line"><span style="color:#000000;">            i++;</span></span>
<span class="line"><span style="color:#000000;">            j++;</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (j == patternLen) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#795E26;">free</span><span style="color:#000000;">(partialMatchTable);</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> i - j;</span><span style="color:#008000;">  // 匹配成功，返回在主串中的起始位置</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">        </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (i &lt; mainLen &amp;&amp; </span><span style="color:#001080;">mainStr</span><span style="color:#000000;">[i] != </span><span style="color:#001080;">pattern</span><span style="color:#000000;">[j]) {</span></span>
<span class="line"><span style="color:#000000;">            </span><span style="color:#AF00DB;">if</span><span style="color:#000000;"> (j != </span><span style="color:#098658;">0</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">                j = </span><span style="color:#001080;">partialMatchTable</span><span style="color:#000000;">[j - </span><span style="color:#098658;">1</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#000000;">            } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">                i++;</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#795E26;">free</span><span style="color:#000000;">(partialMatchTable);</span></span>
<span class="line"><span style="color:#000000;">    </span><span style="color:#AF00DB;">return</span><span style="color:#000000;"> -</span><span style="color:#098658;">1</span><span style="color:#000000;">;</span><span style="color:#008000;">  // 未找到匹配子串</span></span>
<span class="line"><span style="color:#000000;">}</span></span></code></pre></div><p>在匹配的过程中，如果当前字符匹配，则 <code>i</code> 和 <code>j</code> 同时向前移动；如果不匹配，通过部分匹配表 <code>partialMatchTable</code> 来调整模式串的位置，避免不必要的比较。</p>`,36),t=[o];function e(c,r,F,y,D,i){return n(),a("div",null,t)}const u=s(p,[["render",e]]);export{d as __pageData,u as default};
