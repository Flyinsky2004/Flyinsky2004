import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.3838a777.js";const F=JSON.parse('{"title":"Vue3+Vite前端开发框架起步项目","description":"","frontmatter":{},"headers":[],"relativePath":"Vue3WithVite/Starter.md","filePath":"Vue3WithVite/Starter.md"}'),p={name:"Vue3WithVite/Starter.md"},o=l(`<h1 id="vue3-vite前端开发框架起步项目" tabindex="-1">Vue3+Vite前端开发框架起步项目 <a class="header-anchor" href="#vue3-vite前端开发框架起步项目" aria-label="Permalink to &quot;Vue3+Vite前端开发框架起步项目&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">介绍</p><p>这是一个配置好的Vite+Vue3的前端空项目，使用前请确保已配置好node.js环境(推荐版本18+)，已配置好router,axios以及请求工具,element-ui plus 下载链接：<a href="https://www.123pan.com/s/lYa0Vv-cYEAA.html" target="_blank" rel="noreferrer">123网盘</a></p></div><div class="warning custom-block"><p class="custom-block-title">安装教程</p><p>1.解压项目，来到src同级目录打开终端，执行以下命令安装依赖</p><div class="language-node.js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">node.js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm i</span></span></code></pre></div><p><img src="https://z1.ax1x.com/2023/09/27/pPbidiV.png" alt="Description"><img src="https://z1.ax1x.com/2023/09/27/pPbiHeA.png" alt="Description"></p></div><p>2.打开IDE，导入项目，开敲！</p><h2 id="_1-vue3组件库引入步骤" tabindex="-1">1.Vue3组件库引入步骤 <a class="header-anchor" href="#_1-vue3组件库引入步骤" aria-label="Permalink to &quot;1.Vue3组件库引入步骤&quot;">​</a></h2><h4 id="注意-引入组件库清先完整阅读组件库中文文档关于快速开始或安装的说明-确保适用版本为vue3" tabindex="-1">注意：引入组件库清先完整阅读组件库中文文档关于快速开始或安装的说明，确保适用版本为Vue3!!! <a class="header-anchor" href="#注意-引入组件库清先完整阅读组件库中文文档关于快速开始或安装的说明-确保适用版本为vue3" aria-label="Permalink to &quot;注意：引入组件库清先完整阅读组件库中文文档关于快速开始或安装的说明，确保适用版本为Vue3!!!&quot;">​</a></h4><p>1.前往官方中文文档找到npm包管理器的安装命令，以下示例操作为<a href="https://element-plus.org/zh-CN/guide/installation.html" target="_blank" rel="noreferrer">element plus</a>组件库引入 其他组件库雷同。找到已配置好的包管理的相应命令，在<strong>src同级目录</strong>下执行！一般选用npm包管理器的命令即可。</p><p><img src="https://z1.ax1x.com/2023/09/27/pPbFPwn.png" alt=""></p><p><img src="https://z1.ax1x.com/2023/09/27/pPbFKm9.png" alt=""></p><p>2.成功下载依赖后，打开ide,编辑src/main.js 如下示例 一半步骤为</p><p>1.导入依赖</p><p>2.将依赖使用use用法应用到Vue应用中</p><p>3.开敲</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./assets/main.css&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//以下为项目必须依赖</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createPinia } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;pinia&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axios&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> router </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./router/index.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//以下为Element plus 组件库需要导入的依赖</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ElementPlus </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;element-plus&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;element-plus/dist/index.css&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//创建Vue应用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createApp</span><span style="color:#E1E4E8;">(App)</span></span>
<span class="line"><span style="color:#6A737D;">//axios请求配置</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.defaults.baseURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://localhost:8080&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config.globalProperties.$axios </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> axios</span></span>
<span class="line"><span style="color:#6A737D;">//项目必须依赖应用至创建的Vue应用</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">createPinia</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(router)</span></span>
<span class="line"><span style="color:#6A737D;">//将Element plus应用至创建的应用</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(ElementPlus) </span></span>
<span class="line"><span style="color:#6A737D;">//挂载Vue应用</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./assets/main.css&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//以下为项目必须依赖</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createApp } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createPinia } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;pinia&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axios&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> router </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./router/index.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//以下为Element plus 组件库需要导入的依赖</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ElementPlus </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;element-plus&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;element-plus/dist/index.css&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//创建Vue应用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createApp</span><span style="color:#24292E;">(App)</span></span>
<span class="line"><span style="color:#6A737D;">//axios请求配置</span></span>
<span class="line"><span style="color:#24292E;">axios.defaults.baseURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://localhost:8080&#39;</span></span>
<span class="line"><span style="color:#24292E;">app.config.globalProperties.$axios </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> axios</span></span>
<span class="line"><span style="color:#6A737D;">//项目必须依赖应用至创建的Vue应用</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createPinia</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(router)</span></span>
<span class="line"><span style="color:#6A737D;">//将Element plus应用至创建的应用</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(ElementPlus) </span></span>
<span class="line"><span style="color:#6A737D;">//挂载Vue应用</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>以上即为引入组件库的基本步骤，引入后即可在其他Vue应用中引用组件，所有引用方式及配置参数请仔细阅读组件库文档！</p><h2 id="_2-axios请求库" tabindex="-1">2.Axios请求库 <a class="header-anchor" href="#_2-axios请求库" aria-label="Permalink to &quot;2.Axios请求库&quot;">​</a></h2><h3 id="_1-介绍-axios用于处理前端与后端的请求。" tabindex="-1">1.介绍：axios用于处理前端与后端的请求。 <a class="header-anchor" href="#_1-介绍-axios用于处理前端与后端的请求。" aria-label="Permalink to &quot;1.介绍：axios用于处理前端与后端的请求。&quot;">​</a></h3><h3 id="_2-配置" tabindex="-1">2.配置： <a class="header-anchor" href="#_2-配置" aria-label="Permalink to &quot;2.配置：&quot;">​</a></h3><p>1.编辑src/main.js,来到如下代码段：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//axios请求配置</span></span>
<span class="line"><span style="color:#E1E4E8;">axios.defaults.baseURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://localhost:8080&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//单引号内填写请求后端的地址和端口，配置后在其他vue组件中只需要填写链接后的请求路径即可</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config.globalProperties.$axios </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> axios</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//axios请求配置</span></span>
<span class="line"><span style="color:#24292E;">axios.defaults.baseURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://localhost:8080&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//单引号内填写请求后端的地址和端口，配置后在其他vue组件中只需要填写链接后的请求路径即可</span></span>
<span class="line"><span style="color:#24292E;">app.config.globalProperties.$axios </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> axios</span></span></code></pre></div><p>2.（选看，因为我已经都配好了，直接看怎么用就行）来到net/index.js</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axios&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {ElMessage} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;element-plus&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//引入用到的组件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultError</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ElMessage.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;发生错误，请联系管理员。&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//定义默认错误提示语</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultFailure</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ElMessage.</span><span style="color:#B392F0;">warning</span><span style="color:#E1E4E8;">(message) </span><span style="color:#6A737D;">//后端请求返回失败信息时将其打印</span></span>
<span class="line"><span style="color:#6A737D;">//post请求示例</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">success</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">failure</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultFailure, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultError) {</span><span style="color:#6A737D;">//导入请求路径url,请求数据data,以及失败和成功的操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    axios.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(url, data, { </span><span style="color:#6A737D;">//使用axios的post请求 传入路径和数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//设置内容类型</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        withCredentials: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(({</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (data.success)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(data.message, data.status) </span><span style="color:#6A737D;">//判断数据内含的请求成功或失败并做出对应前端操作，执行的操作在组件中引用时书写</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">failure</span><span style="color:#E1E4E8;">(data.message, data.status)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">success</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">failure</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultFailure, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultError) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    axios.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        withCredentials: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(({</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">}) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (data.success)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(data.message, data.status)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">failure</span><span style="color:#E1E4E8;">(data.message, data.status)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(error)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InternalGet</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">url</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">success</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">failure</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultFailure, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> defaultError) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    axios.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        withCredentials: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(response.data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {get, post, InternalGet} </span><span style="color:#6A737D;">//导出get post InternalGet方法 供所有组件使用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axios&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {ElMessage} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;element-plus&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//引入用到的组件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defaultError</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ElMessage.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;发生错误，请联系管理员。&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//定义默认错误提示语</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defaultFailure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ElMessage.</span><span style="color:#6F42C1;">warning</span><span style="color:#24292E;">(message) </span><span style="color:#6A737D;">//后端请求返回失败信息时将其打印</span></span>
<span class="line"><span style="color:#6A737D;">//post请求示例</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#E36209;">success</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultFailure, </span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultError) {</span><span style="color:#6A737D;">//导入请求路径url,请求数据data,以及失败和成功的操作</span></span>
<span class="line"><span style="color:#24292E;">    axios.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(url, data, { </span><span style="color:#6A737D;">//使用axios的post请求 传入路径和数据</span></span>
<span class="line"><span style="color:#24292E;">        headers: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//设置内容类型</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        withCredentials: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(({</span><span style="color:#E36209;">data</span><span style="color:#24292E;">}) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data.success)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(data.message, data.status) </span><span style="color:#6A737D;">//判断数据内含的请求成功或失败并做出对应前端操作，执行的操作在组件中引用时书写</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">failure</span><span style="color:#24292E;">(data.message, data.status)</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">success</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultFailure, </span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultError) {</span></span>
<span class="line"><span style="color:#24292E;">    axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(url, {</span></span>
<span class="line"><span style="color:#24292E;">        withCredentials: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(({</span><span style="color:#E36209;">data</span><span style="color:#24292E;">}) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (data.success)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(data.message, data.status)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">failure</span><span style="color:#24292E;">(data.message, data.status)</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(error)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalGet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">success</span><span style="color:#24292E;">, </span><span style="color:#E36209;">failure</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultFailure, </span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> defaultError) {</span></span>
<span class="line"><span style="color:#24292E;">    axios.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(url, {</span></span>
<span class="line"><span style="color:#24292E;">        withCredentials: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(response.data);</span></span>
<span class="line"><span style="color:#24292E;">    }).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {get, post, InternalGet} </span><span style="color:#6A737D;">//导出get post InternalGet方法 供所有组件使用</span></span></code></pre></div><h3 id="_3-使用" tabindex="-1">3.使用 <a class="header-anchor" href="#_3-使用" aria-label="Permalink to &quot;3.使用&quot;">​</a></h3><p>1.来到组件,找到标签书写</p><p>以下代码为用户访问个人信息页面时向后端请求个人信息，给的起步项目里没有，大家可以依葫芦画瓢</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">import {InternalGet, post} from &quot;@/net&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">import {ElMessage} from &quot;element-plus&quot;;</span></span>
<span class="line"><span style="color:#E1E4E8;">export default {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(){ </span><span style="color:#6A737D;">//定义用到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    return {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">: {} , </span><span style="color:#6A737D;">//定义用户 单个对象</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">users</span><span style="color:#E1E4E8;">:[]	</span><span style="color:#6A737D;">//定义用户数组 可存多个user对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//tip 此处定义不需要指定数据类型 依照赋予值的数据类型而定 每个变量逗号隔开 单个花括号 数组方括号</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {		</span><span style="color:#6A737D;">// 在组件挂载时执行的函数，基本上有在用户访问网页时同时发生的操作都可以在此书写</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.getMyInfo(); </span><span style="color:#6A737D;">//执行methods中的getMyInfo函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: { </span><span style="color:#6A737D;">//此处书写所有网页中用到的函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getMyInfo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 发送GET请求 请求用户数据</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">InternalGet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api/user/me&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.message;</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span><span style="color:#B392F0;">sendCode</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">      ElMessage.</span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;成功发起请求，请等待10s左右&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;api/auth/getAuthCode&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">          }, (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ElMessage.</span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(message)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import {InternalGet, post} from &quot;@/net&quot;;</span></span>
<span class="line"><span style="color:#24292E;">import {ElMessage} from &quot;element-plus&quot;;</span></span>
<span class="line"><span style="color:#24292E;">export default {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(){ </span><span style="color:#6A737D;">//定义用到的数据</span></span>
<span class="line"><span style="color:#24292E;">    return {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">: {} , </span><span style="color:#6A737D;">//定义用户 单个对象</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">users</span><span style="color:#24292E;">:[]	</span><span style="color:#6A737D;">//定义用户数组 可存多个user对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//tip 此处定义不需要指定数据类型 依照赋予值的数据类型而定 每个变量逗号隔开 单个花括号 数组方括号</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {		</span><span style="color:#6A737D;">// 在组件挂载时执行的函数，基本上有在用户访问网页时同时发生的操作都可以在此书写</span></span>
<span class="line"><span style="color:#24292E;">    this.getMyInfo(); </span><span style="color:#6A737D;">//执行methods中的getMyInfo函数</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  methods: { </span><span style="color:#6A737D;">//此处书写所有网页中用到的函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getMyInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 发送GET请求 请求用户数据</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">InternalGet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api/user/me&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.message;</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    },</span><span style="color:#6F42C1;">sendCode</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      ElMessage.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;成功发起请求，请等待10s左右&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;api/auth/getAuthCode&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">          }, (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ElMessage.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(message)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>这里把我们封装好的axios请求函数用法单独拿出来注释 大家对比着理解</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getMyInfo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 发送GET请求 请求用户数据</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">InternalGet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;后端请求路径，无需重复填写后端地址，我们已经在第一步为全局配置好了&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.message; </span><span style="color:#6A737D;">//把数据层定义的user对象的值赋为后端返回的json中的对象数据</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span><span style="color:#B392F0;">sendCode</span><span style="color:#E1E4E8;">(){ </span><span style="color:#6A737D;">//此处为发送验证码的请求方法 post请求</span></span>
<span class="line"><span style="color:#E1E4E8;">      ElMessage.</span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;成功发起请求，请等待10s左右&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//element plus 的信息框提示等待</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;后端请求路径，无需重复填写后端地址，我们已经在第一步为全局配置好了&#39;</span><span style="color:#E1E4E8;">, {  </span></span>
<span class="line"><span style="color:#E1E4E8;">          }, (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ElMessage.</span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(message) </span><span style="color:#6A737D;">//此处message为后端返回的提示信息，我们使用信息框直接打印</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">      )</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getMyInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 发送GET请求 请求用户数据</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">InternalGet</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;后端请求路径，无需重复填写后端地址，我们已经在第一步为全局配置好了&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.message; </span><span style="color:#6A737D;">//把数据层定义的user对象的值赋为后端返回的json中的对象数据</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    },</span><span style="color:#6F42C1;">sendCode</span><span style="color:#24292E;">(){ </span><span style="color:#6A737D;">//此处为发送验证码的请求方法 post请求</span></span>
<span class="line"><span style="color:#24292E;">      ElMessage.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;成功发起请求，请等待10s左右&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//element plus 的信息框提示等待</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;后端请求路径，无需重复填写后端地址，我们已经在第一步为全局配置好了&#39;</span><span style="color:#24292E;">, {  </span></span>
<span class="line"><span style="color:#24292E;">          }, (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ElMessage.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(message) </span><span style="color:#6A737D;">//此处message为后端返回的提示信息，我们使用信息框直接打印</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">      )</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h2 id="_3-router路由" tabindex="-1">3.Router路由 <a class="header-anchor" href="#_3-router路由" aria-label="Permalink to &quot;3.Router路由&quot;">​</a></h2><h3 id="_1-介绍-路由控制着组件与组件之间的嵌套-跳转以及对用户的访问权限进行限制。" tabindex="-1">1.介绍：路由控制着组件与组件之间的嵌套，跳转以及对用户的访问权限进行限制。 <a class="header-anchor" href="#_1-介绍-路由控制着组件与组件之间的嵌套-跳转以及对用户的访问权限进行限制。" aria-label="Permalink to &quot;1.介绍：路由控制着组件与组件之间的嵌套，跳转以及对用户的访问权限进行限制。&quot;">​</a></h3><h3 id="_2-配置-我们来到router-index-js" tabindex="-1">2.配置：我们来到router/index.js <a class="header-anchor" href="#_2-配置-我们来到router-index-js" aria-label="Permalink to &quot;2.配置：我们来到router/index.js&quot;">​</a></h3><p>大家配置跳转的主要操作空间即为routes中，每个子路由的节点用花括号结尾，逗号隔开。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createRouter, createWebHistory } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue-router&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//导入路由和访问模式依赖</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> login </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/views/LoginPage.vue&#39;</span><span style="color:#E1E4E8;">					</span><span style="color:#6A737D;">//引用页面组件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createRouter</span><span style="color:#E1E4E8;">({								</span><span style="color:#6A737D;">//定义路由组件</span></span>
<span class="line"><span style="color:#E1E4E8;">  history: </span><span style="color:#B392F0;">createWebHistory</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">BASE_URL</span><span style="color:#E1E4E8;">),		</span><span style="color:#6A737D;">//定义访问历史模式</span></span>
<span class="line"><span style="color:#E1E4E8;">  routes: [													</span><span style="color:#6A737D;">//定义路由跳转</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      path: </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,											</span><span style="color:#6A737D;">//访问路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;home&#39;</span><span style="color:#E1E4E8;">,											</span><span style="color:#6A737D;">//子路由名称，只是为了作为当前代码文件内的一个标识，方便开发者</span></span>
<span class="line"><span style="color:#E1E4E8;">      component: login										</span><span style="color:#6A737D;">//子路由的组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    },{</span></span>
<span class="line"><span style="color:#E1E4E8;">      path: </span><span style="color:#9ECBFF;">&#39;/test&#39;</span><span style="color:#E1E4E8;">,										</span><span style="color:#6A737D;">//访问路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">,											</span><span style="color:#6A737D;">//子路由名称，只是为了作为当前代码文件内的一个标识，方便开发者</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@/views/Common/allPassages.vue&#39;</span><span style="color:#E1E4E8;">)	</span><span style="color:#6A737D;">//子路由的组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> router </span><span style="color:#6A737D;">//导出封装的router 供所有组件使用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createRouter, createWebHistory } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//导入路由和访问模式依赖</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> login </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/views/LoginPage.vue&#39;</span><span style="color:#24292E;">					</span><span style="color:#6A737D;">//引用页面组件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createRouter</span><span style="color:#24292E;">({								</span><span style="color:#6A737D;">//定义路由组件</span></span>
<span class="line"><span style="color:#24292E;">  history: </span><span style="color:#6F42C1;">createWebHistory</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">BASE_URL</span><span style="color:#24292E;">),		</span><span style="color:#6A737D;">//定义访问历史模式</span></span>
<span class="line"><span style="color:#24292E;">  routes: [													</span><span style="color:#6A737D;">//定义路由跳转</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      path: </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,											</span><span style="color:#6A737D;">//访问路径</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;home&#39;</span><span style="color:#24292E;">,											</span><span style="color:#6A737D;">//子路由名称，只是为了作为当前代码文件内的一个标识，方便开发者</span></span>
<span class="line"><span style="color:#24292E;">      component: login										</span><span style="color:#6A737D;">//子路由的组件</span></span>
<span class="line"><span style="color:#24292E;">    },{</span></span>
<span class="line"><span style="color:#24292E;">      path: </span><span style="color:#032F62;">&#39;/test&#39;</span><span style="color:#24292E;">,										</span><span style="color:#6A737D;">//访问路径</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">,											</span><span style="color:#6A737D;">//子路由名称，只是为了作为当前代码文件内的一个标识，方便开发者</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@/views/Common/allPassages.vue&#39;</span><span style="color:#24292E;">)	</span><span style="color:#6A737D;">//子路由的组件</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> router </span><span style="color:#6A737D;">//导出封装的router 供所有组件使用</span></span></code></pre></div><p>这边单独写出子路由的结构：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,											</span><span style="color:#6A737D;">//访问路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;home&#39;</span><span style="color:#E1E4E8;">,											</span><span style="color:#6A737D;">//子路由名称，只是为了作为当前代码文件内的一个标识，方便开发者</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">: login										</span><span style="color:#6A737D;">//子路由的组件</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span><span style="color:#6A737D;">//每个子路由写完后面跟个逗号是个好习惯，下次可以直接写下一个子路由，不会因为没有逗号而报错</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,											</span><span style="color:#6A737D;">//访问路径</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;home&#39;</span><span style="color:#24292E;">,											</span><span style="color:#6A737D;">//子路由名称，只是为了作为当前代码文件内的一个标识，方便开发者</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">: login										</span><span style="color:#6A737D;">//子路由的组件</span></span>
<span class="line"><span style="color:#24292E;">    },</span><span style="color:#6A737D;">//每个子路由写完后面跟个逗号是个好习惯，下次可以直接写下一个子路由，不会因为没有逗号而报错</span></span></code></pre></div><h3 id="_3-子路由组件的引入方式" tabindex="-1">3.子路由组件的引入方式 <a class="header-anchor" href="#_3-子路由组件的引入方式" aria-label="Permalink to &quot;3.子路由组件的引入方式&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//组件引入</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> login </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/views/LoginPage.vue&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//在代码头部引入组件并在此</span></span>
<span class="line"><span style="color:#6A737D;">//直接引用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//组件引入</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> login </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/views/LoginPage.vue&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//在代码头部引入组件并在此</span></span>
<span class="line"><span style="color:#6A737D;">//直接引用</span></span></code></pre></div><h2 id="_4-vue生命周期" tabindex="-1">4.Vue生命周期 <a class="header-anchor" href="#_4-vue生命周期" aria-label="Permalink to &quot;4.Vue生命周期&quot;">​</a></h2><blockquote><p>在单一组件中，钩子的执行顺序是beforeCreate-&gt; created -&gt; mounted-&gt;... -&gt;destroyed，但当父子组件嵌套时，父组件和子组件各拥有各自独立的钩子函数，<strong>这些父子组件的这些钩子是如何交融执行，且执行顺序又是怎样的呢?</strong></p></blockquote><h4 id="父子组件生命周期执行顺序" tabindex="-1">父子组件生命周期执行顺序 <a class="header-anchor" href="#父子组件生命周期执行顺序" aria-label="Permalink to &quot;父子组件生命周期执行顺序&quot;">​</a></h4><blockquote><p>组件，分别在他们的钩子函数中打印日志，观察执行顺序。得到的结果如图所示，父组件先创建，然后子组件创建；子组件先挂载，然后父组件挂载。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">父beforeCreate-&gt; 父create -&gt; 子beforeCreate-&gt; 子created -&gt; 子mounted -&gt; 父mounted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">父beforeCreate-&gt; 父create -&gt; 子beforeCreate-&gt; 子created -&gt; 子mounted -&gt; 父mounted</span></span></code></pre></div><blockquote><p>子组件挂载完成后，父组件还未挂载。所以组件数据回显的时候，在父组件mounted中获取api的数据，子组件的mounted是拿不到的。</p></blockquote><blockquote><p>仔细看看父子组件生命周期钩子的执行顺序，会发现created这个钩子是按照从外内顺序执行，所以父子组件传递接口数据的解决方案是：</p></blockquote><ul><li>在created中发起请求获取数据，依次在子组件的created或者mounted中会接收到这个数据。</li></ul><h4 id="父子组件生命周期执行顺序-1" tabindex="-1">父子组件生命周期执行顺序 <a class="header-anchor" href="#父子组件生命周期执行顺序-1" aria-label="Permalink to &quot;父子组件生命周期执行顺序&quot;">​</a></h4><h5 id="加载渲染过程" tabindex="-1">加载渲染过程 <a class="header-anchor" href="#加载渲染过程" aria-label="Permalink to &quot;加载渲染过程&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</span></span></code></pre></div><h5 id="更新过程" tabindex="-1">更新过程 <a class="header-anchor" href="#更新过程" aria-label="Permalink to &quot;更新过程&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</span></span></code></pre></div><h5 id="销毁过程" tabindex="-1">销毁过程 <a class="header-anchor" href="#销毁过程" aria-label="Permalink to &quot;销毁过程&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</span></span></code></pre></div><h5 id="常用钩子简易版" tabindex="-1">常用钩子简易版 <a class="header-anchor" href="#常用钩子简易版" aria-label="Permalink to &quot;常用钩子简易版&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">父create-&gt;子created-&gt;子mounted-&gt;父mounted</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">父create-&gt;子created-&gt;子mounted-&gt;父mounted</span></span></code></pre></div><h4 id="补充单一组件钩子执行顺序" tabindex="-1">补充单一组件钩子执行顺序 <a class="header-anchor" href="#补充单一组件钩子执行顺序" aria-label="Permalink to &quot;补充单一组件钩子执行顺序&quot;">​</a></h4><blockquote><p>activated, deactivated 是组件keep-alive时独有的钩子</p></blockquote><ol><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>activated</li><li>deactivated</li><li>beforeDestroy</li><li>destroyed</li><li>errorCaptured</li></ol><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>beforeCreate执行时：data和el均未初始化，值为undefined</li><li>created执行时：Vue 实例观察的数据对象data已经配置好，已经可以得到data的值，但Vue 实例使用的根 DOM 元素el还未初始化</li><li>beforeMount执行时：data和el均已经初始化，但此时el并没有渲染进数据，el的值为“虚拟”的元素节点</li><li>mounted执行时：此时el已经渲染完成并挂载到实例上</li><li>beforeUpdate和updated触发时，el中的数据都已经渲染完成，但只有updated钩子被调用时候，组件dom才被更新。</li><li>在created钩子中可以对data数据进行操作，这个时候可以进行数据请求将返回的数据赋给data</li><li>在mounted钩子对挂载的dom进行操作，此时，DOM已经被渲染到页面上。</li><li>虽然updated函数会在数据变化时被触发，但却不能准确的判断是那个属性值被改变，所以在实际情况中用<strong>computed</strong>或<strong>watch</strong>函数来监听属性的变化，并做一些其他的操作。</li><li>所有的生命周期钩子自动绑定 this 上下文到实例中，所以<strong>不能使用箭头函数来定义一个生命周期方法</strong> (例如 created: () =&gt; this.fetchTodos()),<strong>会导致this指向父级</strong>。</li><li>在使用vue-router时有时需要使用来缓存组件状态，这个时候created钩子就不会被重复调用了，如果我们的子组件需要在每次加载或切换状态的时候进行某些操作，可以使用activated钩子触发。</li><li><strong>父子组件的钩子并不会等待请求返回，请求是异步的，VUE设计也不能因为请求没有响应而不执行后面的钩子。所以，我们必须通过v-if来控制子组件钩子的执行时机</strong></li></ul><h4 id="注意-在父组件传递接口的数据给子组件时-一定要在子组件标签上加上v-if-传递的接口数据" tabindex="-1">注意 在父组件传递接口的数据给子组件时，一定要在子组件标签上加上v-if=&quot;传递的接口数据&quot; <a class="header-anchor" href="#注意-在父组件传递接口的数据给子组件时-一定要在子组件标签上加上v-if-传递的接口数据" aria-label="Permalink to &quot;注意 在父组件传递接口的数据给子组件时，一定要在子组件标签上加上v-if=&quot;传递的接口数据&quot;&quot;">​</a></h4><blockquote><p><strong>在父组件的created中发请求获取数据，通过prop传递给子组件。子组件在created或者mounted中拿父组件传递过来的数据</strong> 这样处理是有问题的。</p></blockquote><blockquote><p>在父组件调用接口传递数据给子组件时，接口响应显然是异步的。这会导致无论你在父组件哪个钩子发请求，在子组件哪个钩子接收数据。都是取不到的。当子组件的mounted都执行完之后，此时可能父组件的请求才返回数据。会导致，从父组件传递给子组件的数据是undefined。</p></blockquote><h4 id="解决方法1" tabindex="-1">解决方法1： <a class="header-anchor" href="#解决方法1" aria-label="Permalink to &quot;解决方法1：&quot;">​</a></h4><p>在渲染子组件的时候加上一个条件,data1是父组件调用接口返回的数据。当有数据的时候在去渲染子组件。这样就会形成天然的阻塞。在父组件的created中的请求返回数据后，才会执行子组件的created，mounted。最后执行父组件的mounted。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">children</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;data1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">:data=&quot;data1&quot;</span><span style="color:#E1E4E8;"> &gt;&lt;/</span><span style="color:#85E89D;">children</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">children</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;data1&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">:data=&quot;data1&quot;</span><span style="color:#24292E;"> &gt;&lt;/</span><span style="color:#22863A;">children</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="解决方法2" tabindex="-1">解决方法2： <a class="header-anchor" href="#解决方法2" aria-label="Permalink to &quot;解决方法2：&quot;">​</a></h4><blockquote><p>在子组件中 watch 监听，父组件获取到值，这个值就会变化，自然是可以监听到的</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">deep</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$nextTick</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newVal</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newVal.url </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> newVal.url </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">deep</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">,</span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$nextTick</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newVal</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newVal.url </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> newVal.url </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>从父组件点击调用接口并显示子组件，子组件拿到数据并监听在watch中调用方法并显示</p></blockquote><p>以下为子组件，data1是从子组件传递过来的数据。在created，mounted中都拿不到父组件调用接口返回的data1。 只能watch监听data1。并调用方法渲染子组件。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">:[</span><span style="color:#9ECBFF;">&#39;data1&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data1</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">deep</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newVal</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">oldVal</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$nextTick</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newVal</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">showData1</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data1)</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">:[</span><span style="color:#032F62;">&#39;data1&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">data1</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">deep</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newVal</span><span style="color:#24292E;">,</span><span style="color:#E36209;">oldVal</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$nextTick</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newVal</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">showData1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data1)</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h1 id="没时间写了-未完待续" tabindex="-1">没时间写了，未完待续... <a class="header-anchor" href="#没时间写了-未完待续" aria-label="Permalink to &quot;没时间写了，未完待续...&quot;">​</a></h1>`,72),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
